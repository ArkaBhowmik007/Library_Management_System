1. List all books that belong to the 'Finance' category and have more than 5 copies available.
SELECT DISTINCT(TITLE) 
FROM BOOKS
WHERE CATEGORY='FINANCE' AND TOTAL_COPIES>5;

2. Find the names of students who borrowed books in the month of August 2025.
SELECT DISTINCT(S.NAME) STUDENT_NAME
FROM STUDENTS S
JOIN TRANSACTIONS T
ON S.STUDENT_ID=T.STUDENT_ID
WHERE T.BORROW_DATE BETWEEN '2025-08-01' AND '2025-08-31';

3. Get the list of books that have never been borrowed.
SELECT B.TITLE
FROM BOOKS B
LEFT JOIN TRANSACTIONS T 
       ON B.BOOK_ID = T.BOOK_ID
WHERE T.TRANSACTION_ID IS NULL;

4. Identify students who have overdue books and the total fine amount they owe.
SELECT S.NAME STUDENT_NAME,SUM(T.FINE_AMOUNT) TOTAL_FINE
FROM STUDENTS S
JOIN TRANSACTIONS T
ON S.STUDENT_ID=T.STUDENT_ID
WHERE T.RETURN_DATE>T.DUE_DATE
GROUP BY S.NAME
ORDER BY TOTAL_FINE;

5. Show the top 3 most borrowed books in the last academic year.
WITH BORROW_BOOKS AS(
SELECT B.TITLE BOOK_NAME,
COUNT(T.TRANSACTION_ID) TIMES_BOOKS_BORROWED,
DENSE_RANK()OVER(ORDER BY COUNT(T.TRANSACTION_ID) DESC) RNK
FROM BOOKS B
JOIN TRANSACTIONS T
ON B.BOOK_ID=T.BOOK_ID
WHERE T.BORROW_DATE BETWEEN '2024-07-01' AND '2025-06-30'
GROUP BY B.TITLE
)
SELECT BOOK_NAME,RNK BOOK_RANK
FROM BORROW_BOOKS
WHERE RNK BETWEEN 1 AND 3;

6. List the number of books borrowed by each student, sorted in descending order.
SELECT S.NAME STUDENT_NAME,COUNT(TRANSACTION_ID) BOOKS_BORROWED 
FROM STUDENTS S
JOIN TRANSACTIONS T
ON S.STUDENT_ID=T.STUDENT_ID
GROUP BY S.NAME
ORDER BY BOOKS_BORROWED DESC;

7. Find all transactions where a fine was charged, along with student names and book titles. 
SELECT T.TRANSACTION_ID DEFAULT_TRANSACTION_IDS,S.NAME STUDENT_NAME,B.TITLE BOOK_TITLE
FROM STUDENTS S
JOIN TRANSACTIONS T
ON S.STUDENT_ID=T.STUDENT_ID
JOIN BOOKS B
ON B.BOOK_ID=T.BOOK_ID
WHERE T.FINE_AMOUNT>0;

8. Display the count of books in each category.
SELECT CATEGORY,COUNT(*) BOOK_COUNT 
FROM BOOKS 
GROUP BY CATEGORY
ORDER BY BOOK_COUNT;

9. Show the student(s) who borrowed the maximum number of books in a single month.
WITH BOOK_BORROW AS(
SELECT STUDENT_ID,YEAR(BORROW_DATE) BORROW_YEAR,
MONTH(BORROW_DATE) BORROW_MONTH,
COUNT(*) BOOKS_BORROWED,
DENSE_RANK() OVER(ORDER BY COUNT(*) DESC) RNK
FROM TRANSACTIONS
GROUP BY STUDENT_ID,YEAR(BORROW_DATE),MONTH(BORROW_DATE)
)
SELECT S.NAME STUDENT_NAME,BB.BORROW_MONTH,BB.BORROW_YEAR,
BB.BOOKS_BORROWED NUMBER_OF_BOOKS_BORROWED
FROM STUDENTS S
JOIN BOOK_BORROW BB
ON S.STUDENT_ID=BB.STUDENT_ID
WHERE BB.RNK=1
GROUP BY S.NAME,BB.BORROW_MONTH,BB.BORROW_YEAR,BB.BOOKS_BORROWED;

10. Find the average fine amount charged per student for the current semester.
SELECT S.NAME,ROUND(AVG(T.FINE_AMOUNT),2) AVERAGE_FINE
FROM STUDENTS S
JOIN TRANSACTIONS T
ON S.STUDENT_ID=T.STUDENT_ID
WHERE S.YEAR_OF_STUDY=1
GROUP BY S.NAME;

11. List all students who have borrowed books by a specific author (e.g., 'Philip Kotler'). 
SELECT S.NAME STUDENT_NAME,B.TITLE BOOK_BORROWED,B.AUTHOR BOOK_AUTHOR
FROM STUDENTS S
JOIN TRANSACTIONS T
ON S.STUDENT_ID=T.STUDENT_ID
JOIN BOOKS B
ON B.BOOK_ID=T.BOOK_ID
WHERE B.AUTHOR='PHILIP KOTLER';

12. Identify the month with the highest borrowing activity.
WITH BOOKS_BORROWED AS(
SELECT YEAR(BORROW_DATE) BORROW_YEAR,
MONTHNAME(BORROW_DATE) BORROW_MONTH,
COUNT(*) BOOKS_BORROWED,
DENSE_RANK() OVER(ORDER BY COUNT(*) DESC) RNK
FROM TRANSACTIONS
GROUP BY YEAR(BORROW_DATE),MONTHNAME(BORROW_DATE)
)
SELECT BORROW_MONTH
FROM BOOKS_BORROWED
WHERE RNK=1;
